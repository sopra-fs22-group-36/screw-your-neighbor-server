@startuml
'https://plantuml.com/class-diagram

interface UserDTO
interface PlayerDTO
interface GameDTO
/'interface LobbyDTO'/
interface ScoreBoardDTO

PlayerDTO <|- Player
UserDTO <|- User
GameDTO <|- Game
/'LobbyDTO <|- Lobby'/
ScoreBoardDTO <|- ScoreBoard

Game "1" *-- "1..*" Match
Game *-- ScoreBoard
Score "1" - "1..*" Player
Match "1" *-- "1" AnnouncementRound
Match "1" *-- "1..*" PlayRound
/'Round "1" *-- "1..*" Turn
Turn *-- CardCollectionPlayer'/
Round "1" *-- "1..n" CardCollectionPlayer
ScoreBoard "1" *-- "1..*" Score
PlayRound "1" o-- "1..*" ScoreAchieved
AnnouncementRound "1" o-- "1..*" ScoreAnnounced
User <|-- Player
Round <|-- AnnouncementRound
Round <|-- PlayRound
Score <|-- ScoreAnnounced
Score <|-- ScoreAchieved
CardCollection <|-- CardCollectionPlayer
CardCollection <|-- CardCollectionTable

Player "1..*" - "1" Game
Player "1" - "1" CardCollectionPlayer
PlayRound "1" *-- "1" CardCollectionTable
Game "1" - "1..*" RuleSet
CardCollection "1" - "1..*" Card
/'Lobby "1" - "1..*" Player'/
Round "1" - "1" Action

class Player {

}

class Game {

Game(players: Player[])

}

class Lobby {

}
note right of Lobby: do we need this class at all?

class RuleSet {

+ DetermineHighestCard (cardCollection: CardCollection)
+ CalculateAchievedPointsPlayer (player: Player)
+ GetScoreBoard (round: Round)
+ ValidateAnnouncedPoints (round: Round, score: Score)
+ GetNextPlayersTurn()

}

class ScoreBoard {

}

class Score {
points: int
}

class ScoreAnnounced {

}

class ScoreAchieved {

}

class Match {

}

abstract class Round {

}

class AnnouncementRound {

}

class PlayRound {

}

enum Card {
ASS
KOENIG
OBER
UNDER
BANNER
NINE
EIGHT
SEVEN
SIX
}

enum Action {
ANNOUNCE
PLAY
}

/'class Turn {
+ Turn (player: Player)
+ announceScore()
+ playCard()
}'/

abstract class CardCollection{
+ playCard()
}

class CardCollectionPlayer {

}
note right of CardCollectionPlayer: known as "Hand"

class CardCollectionTable {
+getHighestCard()
}

@enduml