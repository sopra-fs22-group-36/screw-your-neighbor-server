@startuml
class Player {
    - long id
    - String name
    - String sessionId
}

class User {
    - long id
    - String username
    - String passwordHash
}

enum GameState {
    FINDING_PLAYERS,
    PLAYING,
    CLOSED
}

class Game {
    - long id
    - GameState state
    - String name
}

class Participation {
    - long id
    - boolean active
    - Integer playerOrder

    + int getPoints()
}

note left of Participation::getPoints
    Sums up the scores of the hands
endnote

class Match {
    - long id
    - int matchNumber
    - MatchState matchstate

    + List<Round> getSortedRounds()
}

enum MatchState {
    ANNOUNCING_TRICKS,
    PLAYING_CARDS,
    FINISHED
}

class Hand {
    int announcedScore

    + int getNumberOfWonTricks()
    + int getPoints()
}

note bottom of Hand
    getNumberOfWonTricks looks if
    the winner card of a round is in hand
    can evaluate stacks with Match::getSortedRounds

    getPoints is hardcoded here in the first step.
    Maybe we extract it later to the serialization.
    Only calculated if all cards are played.
endnote

class Round {
    - long id
    - int roundNumber

    + Set<Card> getHighestCards()
    + boolean isStacked()
}

note right of Round::getHighestCards
    not exposed in api
endnote

note left of Round::isStacked
    getHighestCards().size() == 1
    Makes it easy in the frontend to show if round is stacked
endnote

class Card {
    - Suit suit
    - Rank rank

    + boolean isHighestCardsInRound()
}

note left of Card::isHighestCardsInRound
    round.getHighestCards().contains(this)
    Makes it easy in the frontend to show the winner.
endnote

enum Suit {
    CLUB,
    DIAMOND,
    HEART,
    SPADE
}

enum Rank {
  ACE,
  SIX,
  SEVEN,
  EIGHT,
  NINE,
  TEN,
  JACK,
  QUEEN,
  KING
}

Player "*" -- "1" User
Player "1" -- "*" Participation

Participation "*" -- "1" Game
Participation "1" -- "*" Hand

Hand "*" -- "1" Match
Hand "1" -- "1..5" Card

Game "1" -- "1..9" Match

Match "1" -- "1..5" Round

Round "1" -- "1..7" Card


@enduml
